{
    "text.separator": "--------------------------------",
    "app.name": "NokTech Deploy",
    "app.description": "Advanced deployment client with multiple protocol support",
    "app.version": "Version",
    "app.author": "Author",
    "app.repo": "Repository",
    
    "mode.interactive": "Interactive Mode",
    "mode.watch": "Watch Mode",
    
    "protocol.select": "Choose protocol:",
    "protocol.ssh": "SSH/SFTP",
    "protocol.ftp": "FTP",
    "protocol.local": "Local",
    
    "input.choice": "Option",
    "input.source_path": "Source files path:",
    "input.dest_path": "Destination path:",
    "input.host": "Host:",
    "input.user": "User:",
    "input.password": "Password:",
    "input.key_path": "SSH key path:",
    "input.port": "Port ({}):",
    "input.watch": "Enable watch mode? (y/n):",
    "input.overwrite": "Overwrite existing files?",

    "cli.description": "Simple and flexible deployment tool",
    "cli.protocol_help": "Deployment protocol (ssh or local)",
    "cli.host_help": "Remote host for SSH deployment",
    "cli.user_help": "SSH user",
    "cli.password_help": "SSH password (optional)",
    "cli.key_path_help": "SSH key path (optional)",
    "cli.files_path_help": "Files path for deployment",
    "cli.dest_path_help": "Destination path for deployment",
    "cli.watch_help": "Monitor changes and auto-deploy",
    "cli.enter_protocol": "Enter protocol",
    "cli.enter_source_path": "Enter source files path",
    "cli.enter_dest_path": "Enter destination path",
    "cli.watch_mode": "Enable watch mode",
    "cli.optional": "optional",
    "cli.enter_host": "Enter host",
    "cli.enter_user": "Enter user",
    "cli.enter_password": "Enter password",
    "cli.invalid_protocol": "Invalid protocol: {}",
    "cli.error": "Error",

    "error.deploy": "Deploy error: {error}",
    "error.protocol": "Protocol not specified",
    "error.ssh_config": "Incomplete SSH configuration. Host and user are required.",
    "error.not_found": "File or directory not found: {path}",

    "info.deploy_start": "Starting deployment...",
    "info.deploy_success": "Deployment completed successfully!",
    "info.watch_start": "Watching for changes in {path}...",
    "info.file_changed": "File changed: {path}",

    "watch.no_path": "No path specified for watching",
    "watch.error": "Watch mode error: {}",

    "release.checking_deps": "üìã Checking dependencies...",
    "release.checking_deps_complete": "‚úÖ Dependencies checked successfully",
    "release.error.deps": "‚ùå Dependencies check error: {}",

    "build.cleaning": "üßπ Cleaning build directories...",
    "build.clean_complete": "‚ú® Cleanup complete",
    "build.formatting": "üé® Formatting code...",
    "build.testing": "üß™ Running tests...",
    "build.packaging": "üì¶ Packaging project...",
    "build.executable": "üî® Generating executable...",
    "build.docs": "üìö Generating documentation...",
    "build.complete": "‚ú® Build completed successfully!",
    "build.error.build": "‚ùå Build error",
    
    "language.changed": "Language changed to {}",
    "language.select": "Select language:",
    "language.invalid": "Invalid language",
    
    "build.error.executable": "Error generating executable: {}",
    "build.error.deps": "Error checking dependencies: {}",
    "build.error.format": "Error formatting code: {}",
    "build.error.test": "Error running tests: {}",
    "build.error.package": "Error packaging project: {}",
    
    "deploy.confirm": "Confirm deployment? (y/n):",
    "deploy.cancelled": "Deployment cancelled by user",
    "deploy.connecting": "Connecting to server...",
    "deploy.uploading": "Uploading files...",
    "deploy.complete": "Deployment complete!",
    
    "validator.error.missing": "Missing language file: {}",
    "validator.error.invalid": "Invalid language file: {}",
    "validator.error.keys": "Inconsistent keys in file: {}",

    "test.warning.event_loop": "The event_loop fixture provided by pytest-asyncio has been redefined in {}",
    "test.warning.deprecated": "Replacing the event_loop fixture with a custom implementation is deprecated and will lead to errors in the future.",
    "test.warning.scope": "If you want to request an asyncio event loop with a scope other than function scope, use the 'scope' argument to the asyncio mark when marking the tests.",
    "test.warning.policy": "If you want to return different types of event loops, use the event_loop_policy fixture.",
    
    "test.error.fixture_scope": "The configuration option 'asyncio_default_fixture_loop_scope' is unset. The event loop scope for asynchronous fixtures will default to the fixture caching scope.",
    "test.error.future_scope": "Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope.",
    "test.error.set_scope": "Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future.",
    "test.error.valid_scopes": "Valid fixture loop scopes are: 'function', 'class', 'module', 'package', 'session'",
    
    "docs.help": "Docs: {}",

    "pytest.warning.unset": "The configuration option 'asyncio_default_fixture_loop_scope' is unset.",
    "pytest.warning.default": "The event loop scope for asynchronous fixtures will default to the fixture caching scope.",
    "pytest.warning.future": "Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope.",
    "pytest.warning.explicit": "Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future.",
    "pytest.warning.scopes": "Valid fixture loop scopes are: 'function', 'class', 'module', 'package', 'session'",
    
    "pytest.error.redefined": "The event_loop fixture provided by pytest-asyncio has been redefined in {}",
    "pytest.error.deprecated": "Replacing the event_loop fixture with a custom implementation is deprecated and will lead to errors in the future.",
    "pytest.error.scope_arg": "If you want to request an asyncio event loop with a scope other than function scope, use the 'scope' argument to the asyncio mark when marking the tests.",
    "pytest.error.policy": "If you want to return different types of event loops, use the event_loop_policy fixture.",

    "pyinstaller.error.import": "Error importing module: {}",
    "pyinstaller.error.loader": "Loader error: {}",
    "pyinstaller.error.module": "Module not found: {}",
    "pyinstaller.error.fallback": "Fallback finder error: {}",
    "pyinstaller.error.extension": "Error loading extension: {}",
    
    "app.error.fatal": "Fatal application error: {}",
    "app.error.unexpected": "Unexpected error: {}",
    "app.press_enter": "Press ENTER to exit...",
    "app.error_details": "Error details:\n{}"
}